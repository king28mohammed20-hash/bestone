import os
import uuid
from datetime import datetime, date, time as dtime

from flask import Flask, render_template, redirect, url_for, flash, request, abort
from flask_sqlalchemy import SQLAlchemy
from flask_login import (
    LoginManager, UserMixin, login_user, login_required, logout_user, current_user
)
from flask_wtf import FlaskForm
from wtforms import (
    StringField, PasswordField, SubmitField, TextAreaField, SelectField,
    DateField, DecimalField, IntegerField, BooleanField, FileField
)
from wtforms.validators import (
    DataRequired, Email, Length, NumberRange, EqualTo, Optional, URL
)
from werkzeug.security import generate_password_hash, check_password_hash

# =========================================
# App / Config
# =========================================
app = Flask(__name__, template_folder="templates", static_folder="static")
app.config["SECRET_KEY"] = os.environ.get("SECRET_KEY", "dev-secret-change-me")

BASE_DIR = os.path.abspath(os.path.dirname(__file__))
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///" + os.path.join(BASE_DIR, "app.db")
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

# Uploads
UPLOAD_FOLDER = os.path.join(app.static_folder, "uploads")
THUMB_FOLDER = os.path.join(UPLOAD_FOLDER, "thumbs")
os.makedirs(THUMB_FOLDER, exist_ok=True)
ALLOWED_EXTENSIONS = {"jpg", "jpeg", "png"}
app.config["MAX_CONTENT_LENGTH"] = 8 * 1024 * 1024  # 8MB

# Business hours
OPEN_HOUR = 13
CLOSE_HOUR = 22
STEP_MINUTES = int(os.environ.get("STEP_MINUTES", "30"))
CURRENCY_LABEL = os.environ.get("CURRENCY_LABEL", "ريال")

# Closed days (env): CLOSED_WEEKDAYS="5,6" / CLOSED_DATES="2025-08-15,2025-08-20"
CLOSED_WEEKDAYS = set(
    int(x) for x in os.environ.get("CLOSED_WEEKDAYS", "").split(",") if x.strip().isdigit()
)
CLOSED_DATES = set(s.strip() for s in os.environ.get("CLOSED_DATES", "").split(",") if s.strip())

# DB / Login
db = SQLAlchemy(app)
login_manager = LoginManager(app)
login_manager.login_view = "login"

# =========================================
# Jinja filters
# =========================================
def currency(value):
    try:
        return f"{float(value):.2f} {CURRENCY_LABEL}"
    except Exception:
        return f"{value} {CURRENCY_LABEL}"

app.jinja_env.filters["currency"] = currency

# =========================================
# Helpers
# =========================================
def time_slots(step_minutes: int | None = None):
    if step_minutes is None:
        step_minutes = STEP_MINUTES
    slots = []
    for h in range(OPEN_HOUR, CLOSE_HOUR):
        m = 0
        while m < 60:
            # اخر موعد يبدأ 9:30 مساءً
            if h == CLOSE_HOUR - 1 and m > 30:
                break
            slots.append(f"{h:02d}:{m:02d}")
            m += step_minutes
    return slots

def compose_datetime(d: date, t_str: str) -> datetime:
    h, m = map(int, t_str.split(":"))
    return datetime.combine(d, dtime(hour=h, minute=m))

def within_business_hours(dt: datetime) -> bool:
    return (OPEN_HOUR <= dt.hour < CLOSE_HOUR) and not (
        dt.hour == CLOSE_HOUR - 1 and dt.minute > 30
    )

def is_closed_day(d: date) -> bool:
    if str(d) in CLOSED_DATES:
        return True
    return d.weekday() in CLOSED_WEEKDAYS

def is_conflicting(service_id: int, when_dt: datetime) -> bool:
    q = db.select(Booking).where(
        Booking.service_id == service_id,
        Booking.appointment_at == when_dt,
        Booking.status.in_(["pending", "approved"]),
    )
    return db.session.scalar(q) is not None

def allowed_file(filename: str) -> bool:
    return "." in filename and filename.rsplit(".", 1)[1].lower() in ALLOWED_EXTENSIONS

def save_image(file_storage, prefix="img"):
    """Save image as letterboxed contain (1000x500) + thumb (400x200), keeping full image."""
    if not file_storage or file_storage.filename == "":
        return None
    if not allowed_file(file_storage.filename):
        raise ValueError("صيغة الصورة غير مسموحة. المسموح: jpg, jpeg, png")

    unique = f"{prefix}-" + uuid.uuid4().hex[:10] + ".jpg"
    abs_path = os.path.join(UPLOAD_FOLDER, unique)
    file_storage.save(abs_path)

    from PIL import Image, ImageOps

    BOX_W, BOX_H = 1000, 500
    TH_W, TH_H = 400, 200

    with Image.open(abs_path) as im:
        im = im.convert("RGB")

        # Main
        im_fit = ImageOps.contain(im, (BOX_W, BOX_H), Image.LANCZOS)
        canvas = Image.new("RGB", (BOX_W, BOX_H), (255, 255, 255))
        x = (BOX_W - im_fit.width) // 2
        y = (BOX_H - im_fit.height) // 2
        canvas.paste(im_fit, (x, y))
        canvas.save(abs_path, format="JPEG", quality=85, optimize=True)

        # Thumb
        thumb_path = os.path.join(THUMB_FOLDER, unique)
        th_fit = ImageOps.contain(im, (TH_W, TH_H), Image.LANCZOS)
        th_canvas = Image.new("RGB", (TH_W, TH_H), (255, 255, 255))
        tx = (TH_W - th_fit.width) // 2
        ty = (TH_H - th_fit.height) // 2
        th_canvas.paste(th_fit, (tx, ty))
        th_canvas.save(thumb_path, format="JPEG", quality=80, optimize=True)

    return f"uploads/{unique}"

def delete_image(rel_path: str):
    if not rel_path:
        return
    abs_path = os.path.join(app.static_folder, rel_path.replace("/", os.sep))
    thumb_path = os.path.join(app.static_folder, "uploads", "thumbs", os.path.basename(rel_path))
    for p in (abs_path, thumb_path):
        try:
            if os.path.isfile(p):
                os.remove(p)
        except Exception:
            pass

def _service_choices():
    services = db.session.scalars(db.select(Service).order_by(Service.name)).all()
    return [(0, "بدون")] + [(s.id, s.name) for s in services]

def admin_required():
    if not (current_user.is_authenticated and current_user.is_admin):
        abort(403)

# =========================================
# Models
# =========================================
class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    full_name = db.Column(db.String(120), nullable=False)
    email = db.Column(db.String(255), unique=True, nullable=False)
    password_hash = db.Column(db.String(255), nullable=False)
    is_admin = db.Column(db.Boolean, default=False)
    def set_password(self, raw): self.password_hash = generate_password_hash(raw)
    def check_password(self, raw): return check_password_hash(self.password_hash, raw)

class Service(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(120), nullable=False)
    price = db.Column(db.Numeric(10,2), nullable=False, default=0)
    duration_minutes = db.Column(db.Integer, nullable=False, default=60)
    active = db.Column(db.Boolean, default=True)
    image_path = db.Column(db.String(255), nullable=True)

class Offer(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(160), nullable=False)
    description = db.Column(db.Text, nullable=True)
    price = db.Column(db.Numeric(10,2), nullable=True)
    active = db.Column(db.Boolean, default=True)
    service_id = db.Column(db.Integer, db.ForeignKey("service.id"), nullable=True)
    service = db.relationship("Service")
    image_path = db.Column(db.String(255), nullable=True)

class Booking(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey("user.id"), nullable=False)
    service_id = db.Column(db.Integer, db.ForeignKey("service.id"), nullable=False)
    appointment_at = db.Column(db.DateTime, nullable=False, index=True)
    status = db.Column(db.String(20), nullable=False, default="pending")  # pending/approved/cancelled
    notes = db.Column(db.Text, nullable=True)
    user = db.relationship("User")
    service = db.relationship("Service")

class ContactInfo(db.Model):
    __tablename__ = "contact_info"
    id = db.Column(db.Integer, primary_key=True)
    phone = db.Column(db.String(50))
    whatsapp = db.Column(db.String(50))
    email = db.Column(db.String(120))
    address = db.Column(db.String(255))
    location_url = db.Column(db.String(512))
    map_embed = db.Column(db.Text)

    @staticmethod
    def get_single(create_if_missing=True):
        obj = ContactInfo.query.first()
        if not obj and create_if_missing:
            obj = ContactInfo()
            db.session.add(obj)
            db.session.commit()
        return obj

# =========================================
# Forms
# =========================================
class RegisterForm(FlaskForm):
    full_name = StringField("الاسم الكامل", validators=[DataRequired(), Length(min=2, max=120)])
    email = StringField("البريد الإلكتروني", validators=[DataRequired(), Email()])
    password = PasswordField("كلمة المرور", validators=[DataRequired(), Length(min=6)])
    confirm = PasswordField("تأكيد كلمة المرور", validators=[DataRequired(), EqualTo("password")])
    submit = SubmitField("إنشاء حساب")

class LoginForm(FlaskForm):
    email = StringField("البريد الإلكتروني", validators=[DataRequired(), Email()])
    password = PasswordField("كلمة المرور", validators=[DataRequired()])
    submit = SubmitField("دخول")

class BookingForm(FlaskForm):
    service_id = SelectField("الخدمة", coerce=int, validators=[DataRequired()])
    date = DateField("التاريخ", validators=[DataRequired()], format="%Y-%m-%d")
    time = SelectField("الوقت", choices=[], validators=[DataRequired()])
    notes = TextAreaField("ملاحظات (اختياري)")
    submit = SubmitField("احجز")

class ServiceForm(FlaskForm):
    name = StringField("اسم الخدمة", validators=[DataRequired(), Length(min=2, max=120)])
    price = DecimalField("السعر", validators=[DataRequired(), NumberRange(min=0)], places=2)
    duration_minutes = IntegerField("المدة (دقائق)", validators=[DataRequired(), NumberRange(min=15, max=600)])
    active = BooleanField("مُفَعَّل", default=True)
    image = FileField("صورة الخدمة (jpg/png)")
    submit = SubmitField("حفظ")

class OfferForm(FlaskForm):
    title = StringField("عنوان الإعلان", validators=[DataRequired(), Length(min=2, max=160)])
    description = TextAreaField("الوصف")
    price = DecimalField("السعر (اختياري)", places=2)
    service_id = SelectField("يرتبط بخدمة (اختياري)", coerce=int, choices=[(0, "بدون")])
    active = BooleanField("مُفَعَّل", default=True)
    image = FileField("صورة الإعلان (jpg/png)")
    submit = SubmitField("حفظ")

class ChangePasswordForm(FlaskForm):
    current_password = PasswordField("كلمة المرور الحالية", validators=[DataRequired()])
    new_password = PasswordField("كلمة المرور الجديدة", validators=[DataRequired(), Length(min=8, message="8 أحرف على الأقل")])
    confirm = PasswordField("تأكيد كلمة المرور الجديدة", validators=[DataRequired(), EqualTo("new_password", message="غير متطابقة")])
    submit = SubmitField("تحديث كلمة المرور")

class ContactForm(FlaskForm):
    phone = StringField("الهاتف", validators=[Optional(), Length(max=50)])
    whatsapp = StringField("واتساب", validators=[Optional(), Length(max=50)])
    email = StringField("الإيميل", validators=[Optional(), Email(), Length(max=120)])
    address = StringField("العنوان", validators=[Optional(), Length(max=255)])
    location_url = StringField("رابط الموقع على الخريطة", validators=[Optional(), URL(), Length(max=512)])
    map_embed = TextAreaField("كود الخريطة (iframe اختياري)", validators=[Optional(), Length(max=5000)])

# =========================================
# Login manager
# =========================================
@login_manager.user_loader
def load_user(user_id):
    return db.session.get(User, int(user_id))

# يمرّر بيانات التواصل لكل القوالب (لاستخدام رقم واتساب في الزر العائم)
@app.context_processor
def inject_contact():
    try:
        c = ContactInfo.get_single(create_if_missing=True)
    except Exception:
        c = None
    return dict(contact_global=c)


# =========================================
# Routes
# =========================================
@app.route("/")
def index():
    services = db.session.scalars(
        db.select(Service).where(Service.active == True).order_by(Service.name)
    ).all()
    offers = db.session.scalars(
        db.select(Offer).where(Offer.active == True).order_by(Offer.id.desc())
    ).all()
    # لا نمرّر contact هنا لتفادي تكراره في الرئيسية
    return render_template("index.html", services=services, offers=offers)

@app.route("/register", methods=["GET", "POST"])
def register():
    if current_user.is_authenticated:
        return redirect(url_for("index"))
    form = RegisterForm()
    if form.validate_on_submit():
        exist = db.session.scalar(db.select(User).where(User.email == form.email.data.lower()))
        if exist:
            flash("هذا البريد مسجّل سابقًا.", "warning")
            return render_template("register.html", form=form)
        u = User(full_name=form.full_name.data.strip(), email=form.email.data.lower().strip())
        u.set_password(form.password.data)
        db.session.add(u)
        db.session.commit()
        login_user(u)
        flash("تم إنشاء الحساب بنجاح.", "success")
        return redirect(url_for("index"))
    return render_template("register.html", form=form)

@app.route("/login", methods=["GET", "POST"])
def login():
    if current_user.is_authenticated:
        return redirect(url_for("index"))
    form = LoginForm()
    if form.validate_on_submit():
        u = db.session.scalar(db.select(User).where(User.email == form.email.data.lower().strip()))
        if not u or not u.check_password(form.password.data):
            flash("بيانات الدخول غير صحيحة.", "danger")
            return render_template("login.html", form=form)
        login_user(u)
        flash("أهلًا بك.", "success")
        return redirect(url_for("index"))
    return render_template("login.html", form=form)

@app.route("/logout")
@login_required
def logout():
    logout_user()
    flash("تم تسجيل الخروج.", "info")
    return redirect(url_for("index"))

@app.route("/book", methods=["GET","POST"])
@login_required
def book():
    form = BookingForm()
    services = db.session.scalars(
        db.select(Service).where(Service.active == True).order_by(Service.name)
    ).all()
    form.service_id.choices = [(s.id, f"{s.name} — {int(s.duration_minutes)}د") for s in services]
    form.time.choices = [(s, s) for s in time_slots()]

    # Preselect service by ?service_id=
    try:
        pre_id = request.args.get("service_id", type=int)
        if pre_id:
            _s = db.session.get(Service, pre_id)
            if _s and _s.active:
                form.service_id.data = pre_id
    except Exception:
        pass

    if form.validate_on_submit():
        if is_closed_day(form.date.data):
            flash("هذا اليوم مغلق. الرجاء اختيار يوم آخر.", "warning")
            return render_template("booking_form.html", form=form)

        appt_dt = compose_datetime(form.date.data, form.time.data)
        if appt_dt < datetime.now():
            flash("لا يمكن اختيار وقت في الماضي.", "warning")
            return render_template("booking_form.html", form=form)

        if not within_business_hours(appt_dt):
            flash("الدوام من 1:00 ظهرًا إلى 10:00 مساءً (آخر موعد يبدأ 9:30).", "warning")
            return render_template("booking_form.html", form=form)

        if is_conflicting(form.service_id.data, appt_dt):
            flash("هذا الموعد محجوز بالفعل لهذه الخدمة. اختر وقتًا آخر.", "warning")
            return render_template("booking_form.html", form=form)

        b = Booking(
            user_id=current_user.id,
            service_id=form.service_id.data,
            appointment_at=appt_dt,
            notes=form.notes.data or "",
        )
        db.session.add(b)
        db.session.commit()
        flash("تم إرسال طلب الحجز. بانتظار موافقة الإدارة.", "success")
        return redirect(url_for("my_bookings"))

    return render_template("booking_form.html", form=form)

@app.route("/my-bookings")
@login_required
def my_bookings():
    items = db.session.scalars(
        db.select(Booking).where(Booking.user_id == current_user.id).order_by(Booking.appointment_at.desc())
    ).all()
    return render_template("bookings.html", items=items)

# ---------- Admin Home with statuses ----------
@app.route("/admin")
@login_required
def admin_home():
    admin_required()
    pending = db.session.scalars(
        db.select(Booking).where(Booking.status == "pending").order_by(Booking.appointment_at.asc())
    ).all()
    approved = db.session.scalars(
        db.select(Booking).where(Booking.status == "approved").order_by(Booking.appointment_at.asc())
    ).all()
    cancelled = db.session.scalars(
        db.select(Booking).where(Booking.status == "cancelled").order_by(Booking.appointment_at.asc())
    ).all()
    return render_template("admin_home.html", pending=pending, approved=approved, cancelled=cancelled)

@app.route("/admin/approve/<int:booking_id>", methods=["POST"])
@login_required
def admin_approve(booking_id):
    admin_required()
    b = db.session.get(Booking, booking_id) or abort(404)
    b.status = "approved"
    db.session.commit()
    flash("تمت الموافقة على الحجز.", "success")
    return redirect(url_for("admin_home"))

@app.route("/admin/cancel/<int:booking_id>", methods=["POST"])
@login_required
def admin_cancel(booking_id):
    admin_required()
    b = db.session.get(Booking, booking_id) or abort(404)
    b.status = "cancelled"
    db.session.commit()
    flash("تم إلغاء الحجز.", "info")
    return redirect(url_for("admin_home"))

@app.route("/admin/reset/<int:booking_id>", methods=["POST"])
@login_required
def admin_reset(booking_id):
    admin_required()
    b = db.session.get(Booking, booking_id) or abort(404)
    b.status = "pending"
    db.session.commit()
    flash("تمت إعادة الحالة إلى قيد المراجعة.", "info")
    return redirect(url_for("admin_home"))

@app.route("/admin/delete/<int:booking_id>", methods=["POST"])
@login_required
def admin_delete(booking_id):
    admin_required()
    b = db.session.get(Booking, booking_id) or abort(404)
    db.session.delete(b)
    db.session.commit()
    flash("تم حذف الحجز نهائيًا.", "warning")
    return redirect(url_for("admin_home"))

# ---------- Admin Services ----------
@app.route("/admin/services")
@login_required
def admin_services():
    admin_required()
    items = db.session.scalars(db.select(Service).order_by(Service.name)).all()
    return render_template("admin_services.html", items=items)

@app.route("/admin/services/new", methods=["GET","POST"])
@login_required
def admin_service_new():
    admin_required()
    form = ServiceForm()
    if form.validate_on_submit():
        s = Service(
            name=form.name.data.strip(),
            price=form.price.data,
            duration_minutes=form.duration_minutes.data,
            active=True
        )
        if "image" in request.files and request.files["image"].filename:
            try:
                rel = save_image(request.files["image"], prefix="service")
                s.image_path = rel
            except Exception as e:
                flash(str(e), "danger")
                return render_template("admin_service_form.html", form=form, is_edit=False)
        db.session.add(s)
        db.session.commit()
        flash("تمت إضافة الخدمة.", "success")
        return redirect(url_for("admin_services"))
    return render_template("admin_service_form.html", form=form, is_edit=False)

@app.route("/admin/services/<int:service_id>/edit", methods=["GET","POST"])
@login_required
def admin_service_edit(service_id):
    admin_required()
    s = db.session.get(Service, service_id) or abort(404)
    form = ServiceForm(obj=s)
    if form.validate_on_submit():
        s.name = form.name.data.strip()
        s.price = form.price.data
        s.duration_minutes = form.duration_minutes.data
        s.active = True
        if "image" in request.files and request.files["image"].filename:
            try:
                if s.image_path:
                    delete_image(s.image_path)
                rel = save_image(request.files["image"], prefix="service")
                s.image_path = rel
            except Exception as e:
                flash(str(e), "danger")
                return render_template("admin_service_form.html", form=form, is_edit=True)
        db.session.commit()
        flash("تم تعديل الخدمة.", "success")
        return redirect(url_for("admin_services"))
    return render_template("admin_service_form.html", form=form, is_edit=True)

@app.route("/admin/services/<int:service_id>/delete", methods=["POST"])
@login_required
def admin_service_delete(service_id):
    admin_required()
    s = db.session.get(Service, service_id) or abort(404)
    if s.image_path:
        delete_image(s.image_path)
    db.session.delete(s)
    db.session.commit()
    flash("تم حذف الخدمة.", "info")
    return redirect(url_for("admin_services"))

# ---------- Admin Offers ----------
@app.route("/admin/offers")
@login_required
def admin_offers():
    admin_required()
    items = db.session.scalars(db.select(Offer).order_by(Offer.id.desc())).all()
    return render_template("admin_offers.html", items=items)

@app.route("/admin/offers/new", methods=["GET","POST"])
@login_required
def admin_offer_new():
    admin_required()
    form = OfferForm()
    form.service_id.choices = _service_choices()
    if form.validate_on_submit():
        service_id = form.service_id.data or 0
        o = Offer(
            title=form.title.data.strip(),
            description=form.description.data or "",
            price=form.price.data if form.price.data is not None else None,
            active=True,
            service_id=(service_id if service_id != 0 else None)
        )
        if "image" in request.files and request.files["image"].filename:
            try:
                rel = save_image(request.files["image"], prefix="offer")
                o.image_path = rel
            except Exception as e:
                flash(str(e), "danger")
                return render_template("admin_offer_form.html", form=form, is_edit=False)
        db.session.add(o)
        db.session.commit()
        flash("تمت إضافة الإعلان.", "success")
        return redirect(url_for("admin_offers"))
    return render_template("admin_offer_form.html", form=form, is_edit=False)

@app.route("/admin/offers/<int:offer_id>/edit", methods=["GET","POST"])
@login_required
def admin_offer_edit(offer_id):
    admin_required()
    o = db.session.get(Offer, offer_id) or abort(404)
    form = OfferForm(obj=o)
    form.service_id.choices = _service_choices()
    form.service_id.data = o.service_id or 0
    if form.validate_on_submit():
        o.title = form.title.data.strip()
        o.description = form.description.data or ""
        o.price = form.price.data if form.price.data is not None else None
        o.active = True
        o.service_id = (form.service_id.data if form.service_id.data != 0 else None)
        if "image" in request.files and request.files["image"].filename:
            try:
                if o.image_path:
                    delete_image(o.image_path)
                rel = save_image(request.files["image"], prefix="offer")
                o.image_path = rel
            except Exception as e:
                flash(str(e), "danger")
                return render_template("admin_offer_form.html", form=form, is_edit=True)
        db.session.commit()
        flash("تم تعديل الإعلان.", "success")
        return redirect(url_for("admin_offers"))
    return render_template("admin_offer_form.html", form=form, is_edit=True)

@app.route("/admin/offers/<int:offer_id>/delete", methods=["POST"])
@login_required
def admin_offer_delete(offer_id):
    admin_required()
    o = db.session.get(Offer, offer_id) or abort(404)
    if o.image_path:
        delete_image(o.image_path)
    db.session.delete(o)
    db.session.commit()
    flash("تم حذف الإعلان.", "info")
    return redirect(url_for("admin_offers"))

# ---------- Account ----------
@app.route("/account/password", methods=["GET","POST"])
@login_required
def change_password():
    form = ChangePasswordForm()
    if form.validate_on_submit():
        if not current_user.check_password(form.current_password.data):
            flash("كلمة المرور الحالية غير صحيحة.", "danger")
            return render_template("change_password.html", form=form)
        current_user.set_password(form.new_password.data)
        db.session.commit()
        flash("تم تحديث كلمة المرور بنجاح.", "success")
        return redirect(url_for("index"))
    return render_template("change_password.html", form=form)

# ---------- Contact (page + admin edit) ----------
@app.route("/contact")
def contact_page():
    contact = ContactInfo.get_single(create_if_missing=True)
    return render_template("contact.html", contact=contact)

@app.route("/admin/contact", methods=["GET", "POST"])
@login_required
def admin_contact():
    admin_required()
    contact = ContactInfo.get_single()
    form = ContactForm(obj=contact)
    if form.validate_on_submit():
        form.populate_obj(contact)
        db.session.commit()
        flash("تم حفظ بيانات التواصل.", "success")
        return redirect(url_for("contact_page"))
    return render_template("admin_contact.html", form=form)

# =========================================
# CLI
# =========================================
@app.cli.command("init-db")
def init_db():
    """Initialize the database and seed default data."""
    db.drop_all()
    db.create_all()

    admin_email = os.environ.get("ADMIN_EMAIL", "admin@example.com").lower()
    admin_password = os.environ.get("ADMIN_PASSWORD", "admin123")
    admin_name = os.environ.get("ADMIN_NAME", "Administrator")

    admin = User(full_name=admin_name, email=admin_email, is_admin=True)
    admin.set_password(admin_password)
    db.session.add(admin)

    services = [
        Service(name="تظليل", price=35, duration_minutes=60, active=True),
        Service(name="نانو سيراميك", price=120, duration_minutes=180, active=True),
        Service(name="تلميع داخلي", price=50, duration_minutes=90, active=True),
        Service(name="حماية واجهة", price=40, duration_minutes=60, active=True),
    ]
    db.session.add_all(services)

    demo_offer = Offer(
        title="عرض تظليل خاص", description="خصم على التظليل لهذا الأسبوع.", price=30, active=True, service_id=None
    )
    db.session.add(demo_offer)

    db.session.commit()
    print("✅ Database initialized. Admin:", admin_email)

# =========================================
# Main
# =========================================
if __name__ == "__main__":
    app.run(debug=True)
# ====== Video helpers ======
ALLOWED_VIDEO_EXTS = {"mp4"}
VIDEO_FOLDER = os.path.join(app.static_folder, "uploads", "videos")
os.makedirs(VIDEO_FOLDER, exist_ok=True)

def allowed_video(filename: str) -> bool:
    return "." in filename and filename.rsplit(".", 1)[1].lower() in ALLOWED_VIDEO_EXTS

def save_video_file(file_storage, prefix="vid"):
    if not file_storage or file_storage.filename == "":
        return None
    if not allowed_video(file_storage.filename):
        raise ValueError("صيغة الفيديو غير مسموحة. المسموح: mp4")
    unique = f"{prefix}-" + uuid.uuid4().hex[:10] + ".mp4"
    abs_path = os.path.join(VIDEO_FOLDER, unique)
    file_storage.save(abs_path)
    return f"uploads/videos/{unique}"

import re as _re
_YT_PATTERNS = [
    r"(?:v=|\/)([0-9A-Za-z_-]{11})(?:\?|&|$)",
    r"youtu\.be\/([0-9A-Za-z_-]{11})",
]
def parse_youtube_id(url: str) -> str | None:
    if not url: return None
    for p in _re._pattern_type(_re.compile(_re.escape("")).pattern) if False else _YT_PATTERNS:
        m = _re.search(p, url)
        if m: return m.group(1)
    return None

class Video(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(160), nullable=False)
    description = db.Column(db.Text, nullable=True)
    source = db.Column(db.String(16), nullable=False, default="youtube")  # youtube | mp4
    youtube_id = db.Column(db.String(16), nullable=True)
    file_path = db.Column(db.String(255), nullable=True)   # static path for mp4
    poster_path = db.Column(db.String(255), nullable=True) # صورة غلاف (اختياري)
    active = db.Column(db.Boolean, default=True)
    featured = db.Column(db.Boolean, default=False)
    sort = db.Column(db.Integer, default=0)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class VideoForm(FlaskForm):
    title = StringField("العنوان", validators=[DataRequired(), Length(min=2, max=160)])
    description = TextAreaField("الوصف", validators=[Optional(), Length(max=2000)])
    source = SelectField("المصدر", choices=[("youtube","يوتيوب"), ("mp4","رفع ملف MP4")])
    youtube_url = StringField("رابط يوتيوب", validators=[Optional(), URL()])
    video_file = FileField("ملف الفيديو (MP4)")
    poster = FileField("صورة غلاف (اختياري)")
    active = BooleanField("فعّال", default=True)
    featured = BooleanField("مميّز", default=False)
    sort = IntegerField("الترتيب (أصغر يظهر أولاً)", validators=[Optional()], default=0)
    submit = SubmitField("حفظ")\n\n\n\n# ---------- Admin Videos ----------
@app.route("/admin/videos")
@login_required
def admin_videos():
    admin_required()
    items = db.session.scalars(
        db.select(Video).order_by(Video.sort.asc(), Video.created_at.desc())
    ).all()
    return render_template("admin_videos.html", items=items)

@app.route("/admin/videos/new", methods=["GET","POST"])
@login_required
def admin_video_new():
    admin_required()
    form = VideoForm()
    if form.validate_on_submit():
        v = Video(
            title=form.title.data.strip(),
            description=form.description.data or "",
            source=form.source.data,
            active=form.active.data,
            featured=form.featured.data,
            sort=form.sort.data or 0
        )
        try:
            if form.source.data == "youtube":
                vid = parse_youtube_id(form.youtube_url.data or "")
                if not vid:
                    flash("رابط يوتيوب غير صالح.", "danger")
                    return render_template("admin_video_form.html", form=form, is_edit=False)
                v.youtube_id = vid
            else:
                fs = request.files.get("video_file")
                if not fs or fs.filename == "":
                    flash("الرجاء اختيار ملف MP4.", "danger")
                    return render_template("admin_video_form.html", form=form, is_edit=False)
                v.file_path = save_video_file(fs, prefix="video")

            if "poster" in request.files and request.files["poster"].filename:
                try:
                    v.poster_path = save_image(request.files["poster"], prefix="video_poster")
                except Exception as e:
                    flash(str(e), "danger")
                    return render_template("admin_video_form.html", form=form, is_edit=False)

            db.session.add(v)
            db.session.commit()
            flash("تمت إضافة الفيديو.", "success")
            return redirect(url_for("admin_videos"))
        except Exception as e:
            flash(str(e), "danger")
    return render_template("admin_video_form.html", form=form, is_edit=False)

@app.route("/admin/videos/<int:video_id>/edit", methods=["GET","POST"])
@login_required
def admin_video_edit(video_id):
    admin_required()
    v = db.session.get(Video, video_id) or abort(404)
    form = VideoForm(obj=v)
    if v.source == "youtube" and v.youtube_id:
        form.youtube_url.data = f"https://youtu.be/{v.youtube_id}"
    if form.validate_on_submit():
        v.title = form.title.data.strip()
        v.description = form.description.data or ""
        v.source = form.source.data
        v.active = form.active.data
        v.featured = form.featured.data
        v.sort = form.sort.data or 0
        try:
            if form.source.data == "youtube":
                vid = parse_youtube_id(form.youtube_url.data or "")
                if not vid:
                    flash("رابط يوتيوب غير صالح.", "danger")
                    return render_template("admin_video_form.html", form=form, is_edit=True)
                v.youtube_id = vid
                v.file_path = None
            else:
                fs = request.files.get("video_file")
                if fs and fs.filename:
                    if v.file_path:
                        try:
                            os.remove(os.path.join(app.static_folder, v.file_path.replace("/", os.sep)))
                        except Exception: pass
                    v.file_path = save_video_file(fs, prefix="video")

            if "poster" in request.files and request.files["poster"].filename:
                if v.poster_path:
                    try:
                        os.remove(os.path.join(app.static_folder, v.poster_path.replace("/", os.sep)))
                    except Exception: pass
                v.poster_path = save_image(request.files["poster"], prefix="video_poster")

            db.session.commit()
            flash("تم تعديل الفيديو.", "success")
            return redirect(url_for("admin_videos"))
        except Exception as e:
            flash(str(e), "danger")
    return render_template("admin_video_form.html", form=form, is_edit=True)

@app.route("/admin/videos/<int:video_id>/delete", methods=["POST"])
@login_required
def admin_video_delete(video_id):
    admin_required()
    v = db.session.get(Video, video_id) or abort(404)
    for p in (v.file_path, v.poster_path):
        if p:
            try:
                os.remove(os.path.join(app.static_folder, p.replace("/", os.sep)))
            except Exception: pass
    db.session.delete(v)
    db.session.commit()
    flash("تم حذف الفيديو.", "info")
    return redirect(url_for("admin_videos"))

# ---------- Public Videos ----------
@app.route("/videos")
def videos_page():
    items = db.session.scalars(
        db.select(Video).where(Video.active == True).order_by(Video.sort.asc(), Video.created_at.desc())
    ).all()
    return render_template("videos.html", items=items)\n\n\n\n@app.cli.command("upgrade-db")
def upgrade_db():
    \"\"\"Create any missing tables without dropping existing data.\"\"\"
    db.create_all()
    print("✅ DB upgraded (created missing tables).")\n\n